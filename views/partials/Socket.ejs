<script src="/socket.io/socket.io.js"></script>
<script defer="defer">
var socket = io();

var BaseContainer = document.getElementById("ProductListContainer");
var DeleteButtons = document.getElementsByClassName("DeleteButton");
var UpdateButtons = document.getElementsByClassName("UpdateButton");
var Add = document.getElementById("Add");


function setAttributes(el, attrs) {
  for(var key in attrs) {
    el.setAttribute(key, attrs[key]);
  }
}

function CreateElement(){
    var BaseContainer = document.getElementById("ProductListContainer");
    var Container = document.createElement("div");
    setAttributes(Container, {'class':'ProductContainer', 'style':'background-image: url("");'});
    var Form1 = document.createElement("form");
    setAttributes(Form1, {"id":'Delete', 'action':'/Delete', 'method':'post'});
    Form1.insertAdjacentHTML("beforeend", "<button class='DeleteButton' type='submit' name='Sable' value='null'></button>");
    var Form2 = document.createElement("form");
    setAttributes(Form2, {"id":'Update', 'action':'/Update', 'method':'get'});
    Form2.insertAdjacentHTML("beforeend", "<button class='UpdateButton' type='submit' name='Sable' value='null'></button>");
    var Form3 = document.createElement("form");
    setAttributes(Form3, {'action':'null', 'method':'get', 'style':'height:100%;'});
    Form3.insertAdjacentHTML("beforeend", '<button class="ProductButton" name="C_Product" value="null" ><div class="NameContainer"><p class="ItemName">SKU:null</p><p class="ItemName">Brand:null</p><p class="ItemName">Color:null</p></div></button>');    
    Container.appendChild(Form1);
    Container.appendChild(Form2);
    Container.appendChild(Form3);
    return Container;
}

function BuildProductArray(ProductArray, msg){
    for(let j = 0; j < ProductArray.length; j++) //Build the elements
    {
        ProductArray[j].setAttribute("style", `background-image: url()`);
        ProductArray[j].children[0].setAttribute("value", `${msg[j].key}`);
        ProductArray[j].children[1].children[0].setAttribute("value", `${msg[j].key}`);
        ProductArray[j].children[2].children[0].setAttribute("value", `${msg[j].key}`);
        ProductArray[j].children[2].children[0].children[0].children[0].textContent = `SKU:${msg[j].sku}`;
        ProductArray[j].children[2].children[0].children[0].children[1].textContent = `Brand:${msg[j].brand}`;
        ProductArray[j].children[2].children[0].children[0].children[2].textContent = `Color:${msg[j].Color}`;
    }
    return ProductArray;
}

function RemoveChildNodes(Element){ //Removes All Childeren and returns true if it manages to remove all else return false
    var count = 0;
    while(Element.hasChildNodes()){ //Remove all childeren from the BaseContainer
        Element.removeChild(Element.firstChild);
        if(count > 100000){
            return false;
        }
        count++;
    }
    return true;
}

function isVisible(elem) {
    if (!(elem instanceof Element)) throw Error('DomUtil: elem is not an element.');
    const style = getComputedStyle(elem);
    if (style.display === 'none') return false;
    if (style.visibility !== 'visible') return false;
    if (style.opacity < 0.1) return false;
    if (elem.offsetWidth + elem.offsetHeight + elem.getBoundingClientRect().height +
        elem.getBoundingClientRect().width === 0) {
        return false;
    }
    const elemCenter   = {
        x: elem.getBoundingClientRect().left + elem.offsetWidth / 2,
        y: elem.getBoundingClientRect().top + elem.offsetHeight / 2
    };
    if (elemCenter.x < 0) return false;
    if (elemCenter.x > (document.documentElement.clientWidth || window.innerWidth)) return false;
    if (elemCenter.y < 0) return false;
    if (elemCenter.y > (document.documentElement.clientHeight || window.innerHeight)) return false;
    let pointContainer = document.elementFromPoint(elemCenter.x, elemCenter.y);
    do {
        if (pointContainer === elem) return true;
    } while (pointContainer = pointContainer.parentNode);
    return false;
}

let Start = false;
function FirstBuild(msg){
    console.log("FirstBuild");
    Start = true;
    var ProductArray = []; //This Will hold our finished Elements
    if(msg.length > 0){
        if(BaseContainer.children.length > 0){
            for(let j = 0; j < msg.length; j++){
                ProductArray.push(BaseContainer.children[0].cloneNode(true)); //Push Clones into the array to fill our product need
            }
        }
    }
    BuildProductArray(ProductArray, msg);
    RemoveChildNodes(BaseContainer);
    var UseMaxLength = ProductArray.length < 100 ? ProductArray.length : 100;
    ProductList = ProductArray;
    for(let items = 0; items < UseMaxLength; items++){
        IndexList.push(items);
        BaseContainer.appendChild(ProductArray[items]);
    }
    socket.emit('UpdateList', msg={Target:'Sable', ProductList:ProductArray});
    Re_getDocuments();
    AddButtonEventListeners();
}

var ProductList = [];
var IndexList = [];
async function UpdateList(msg){
    if(isVisible(BaseContainer.children[IndexList[IndexList.length - 11]])){
        console.log("Display");
        var Length = IndexList.length;
        for(let i = Length; i < (Length+50); i++){
            if(i == ProductList.length){
                return;
            }
            IndexList.push(i);
            BaseContainer.appendChild(ProductList[i]);
        }
        for(let j = 0; j < 49; j++){
            IndexList.shift();
            BaseContainer.firstChild.remove();
        }
        Re_getDocuments();
    }
    if(isVisible(BaseContainer.children[IndexList[0]]) && IndexList[0] > 10){
       console.log("Start");
    }
    
}

function Re_getDocuments(){
    DeleteButtons = [];
    UpdateButtons = [];
    BaseContainer = document.getElementById("ProductListContainer");
    DeleteButtons = document.getElementsByClassName("DeleteButton");
    UpdateButtons = document.getElementsByClassName("UpdateButton");
}

async function AddProducts(Start, End, {Side:{Top, Bottom}}){
    for(let items = Start; items < End; items++){
        if(Side.Top == true){
            BaseContainer.insertAdjacentElement("afterbegin", ProductList[items])
        }
        if(Side.Bottom == true){
            BaseContainer.appendChild(ProductList[items]);
        }
        
    }
    Re_getDocuments();
    AddButtonEventListeners();
}

async function AddButtonEventListeners(){
    for(let i = 0; i < DeleteButtons.length; i++){
        DeleteButtons[i].addEventListener('click', function(e) {
            socket.emit('Delete', msg={Target:'<%- PageState.CurrentRenderTarget %>', Value:DeleteButtons[i].getAttribute("value")});
        });
    }
    for(let j = 0; j < UpdateButtons.length; j++){
        UpdateButtons[j].addEventListener('click', function(e) {
            socket.emit('Update', msg="Sable");
        });
    }
}

let _scroll = false;
BaseContainer.addEventListener("scroll", async () => {
    _scroll = true;
})



setInterval(() => {
    if(_scroll){
        _scroll = false;
        socket.emit("Ping");
    } 
}, 500);


socket.on('Pong', function(msg){
    console.log("Pong");
    UpdateList(msg);
});

Add.addEventListener('click', function(e) {
    //socket.emit('Add', msg={Target:"Sable"});
  });
socket.on("Delete", function(msg){
    //BuildProduct(msg);
});
socket.on("Add", function(msg){
    //console.log(msg);
});
socket.on("init", function(msg){
    console.log("Hello");
    FirstBuild(msg);
});
</script>