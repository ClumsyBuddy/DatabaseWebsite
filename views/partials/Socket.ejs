<script src="/socket.io/socket.io.js"></script>
<script async>
var socket = io();

socket.emit("init");

var BaseContainer = document.getElementById("ProductListContainer");
var DeleteButtons = document.getElementsByClassName("DeleteButton");
var UpdateButtons = document.getElementsByClassName("UpdateButton");
var Add = document.getElementById("Add");
let scrollLock = false;
var ScrollPosY = undefined;
var ScrollDirection = {Up:false, Down:false};
let Start = false;
const ContainerLength = 100;
var ElementContainer = [];
var ProductList = [];


function setAttributes(el, attrs) {
  for(var key in attrs) {
    el.setAttribute(key, attrs[key]);
  }
}

function CreateElement(){
    var Container = document.createElement("div");
    setAttributes(Container, {'class':'ProductContainer', 'style':'background-image: url("");'});
    var Form1 = document.createElement("form");
    setAttributes(Form1, {"id":'Delete', 'action':'/Delete', 'method':'post'});
    Form1.insertAdjacentHTML("beforeend", "<button class='DeleteButton' type='submit' name='Sable' value='null'></button>");
    var Form2 = document.createElement("form");
    setAttributes(Form2, {"id":'Update', 'action':'/Update', 'method':'get'});
    Form2.insertAdjacentHTML("beforeend", "<button class='UpdateButton' type='submit' name='Sable' value='null'></button>");
    var Form3 = document.createElement("form");
    setAttributes(Form3, {'action':'null', 'method':'get', 'style':'height:100%;'});
    Form3.insertAdjacentHTML("beforeend", '<button class="ProductButton" name="C_Product" value="null" ><div class="NameContainer"><p class="ItemName">SKU:null</p><p class="ItemName">Brand:null</p><p class="ItemName">Color:null</p></div></button>');    
    Container.appendChild(Form1);
    Container.appendChild(Form2);
    Container.appendChild(Form3);
    return Container;
}

async function Produce(Ele, key, sku, brand, color){
    Ele.setAttribute("style", `background-image: url()`);
    Ele.children[0].setAttribute("value", `${key}`);
    Ele.children[1].children[0].setAttribute("value", `${key}`);
    Ele.children[2].children[0].setAttribute("value", `${key}`);
    Ele.children[2].children[0].children[0].children[0].textContent = `SKU:${sku}`;
    Ele.children[2].children[0].children[0].children[1].textContent = `Brand:${brand}`;
    Ele.children[2].children[0].children[0].children[2].textContent = `Color:${color}`;
    return true;
}
function BuildProductArray(msg, StartIndex, FinishIndex){
    for(let j = StartIndex; j < FinishIndex; j++) //Build the elements
    {
        setTimeout(() => {
            Produce(ProductList[j], msg[j].key, msg[j].sku, msg[j].brand, msg[j].Color);
        }, 10*j);
    }
    BuildContainer(ProductList, StartIndex, FinishIndex);
    console.log("Finished: " + StartIndex + " - " + FinishIndex);
}
function BuildFactory(msg, Length, Max){
    try{
        for(let i = 0; i < Length / Max; i++){
            setTimeout(() => {
                BuildProductArray(msg, (Max*i)+1, Max*(i+1));
            }, 5*i);
        }
    }catch(e){
        console.log(e);
    }
}


function RemoveChildNodes(Element){ //Removes All Childeren and returns true if it manages to remove all else return false
    var count = 0;
    while(Element.hasChildNodes()){ //Remove all childeren from the BaseContainer
        Element.removeChild(Element.firstChild);
        if(count > 100000){
            return false;
        }
        count++;
    }
    return true;
}

function isVisible(elem) {
    if (!(elem instanceof Element)) throw Error('DomUtil: elem is not an element.');
    const style = getComputedStyle(elem);
    if (style.display === 'none') return false;
    if (style.visibility !== 'visible') return false;
    if (style.opacity < 0.1) return false;
    if (elem.offsetWidth + elem.offsetHeight + elem.getBoundingClientRect().height +
        elem.getBoundingClientRect().width === 0) {
        return false;
    }
    const elemCenter   = {
        x: elem.getBoundingClientRect().left + elem.offsetWidth / 2,
        y: elem.getBoundingClientRect().top + elem.offsetHeight / 2
    };
    if (elemCenter.x < 0) return false;
    if (elemCenter.x > (document.documentElement.clientWidth || window.innerWidth)) return false;
    if (elemCenter.y < 0) return false;
    if (elemCenter.y > (document.documentElement.clientHeight || window.innerHeight)) return false;
    let pointContainer = document.elementFromPoint(elemCenter.x, elemCenter.y);
    do {
        if (pointContainer === elem) return true;
    } while (pointContainer = pointContainer.parentNode);
    return false;
}

function BuildContainer(List, Start, End){
    var TempArray = [];
    for(let j = Start; j < End; j++) //Build the elements
    {
        TempArray.push(ProductList[j]);
    }
    ElementContainer.push(TempArray);
}
function BuildDisplayContainers(List, Length, Max){
    try{
        for(let i = 0; i < Length / Max; i++){
            setTimeout(() => {
                BuildContainer(List, (Max*i)+1, Max*(i+1)); 
            }, 10*i);
        }
    }catch(e){
        console.log(e);
    }
}

function FirstBuild(msg){
    if(msg.length > 0){
        var Node = CreateElement();
        for(let j = 0; j < msg.length; j++){
            ProductList.push(Node.cloneNode(true)); //Push Clones into the array to fill our product need
        }
    }
    console.log(ProductList.length);
    BuildProductArray(msg, 0, ContainerLength);
    BuildFactory(msg, ProductList.length, ContainerLength);        

    RemoveChildNodes(BaseContainer);
    for(let items = 0; items < ContainerLength; items++){
        BaseContainer.appendChild(ProductList[items]);
    }
    Re_getDocuments();
    AddButtonEventListeners();
}

var EndIndex = 1;
var StartIndex = 0;
function UpdateList(msg){
    //console.log(ElementContainer);
    Re_getDocuments();
    AddButtonEventListeners();
    for(let i = 0; i < BaseContainer.children.length; i++){
        if(isVisible(BaseContainer.childNodes[i]) && BaseContainer.childNodes[i].isEqualNode(ElementContainer[EndIndex][ElementContainer[EndIndex].length - 5])){
            if(EndIndex == 1){
                for(let i = 0; i < ElementContainer[EndIndex].length - 1; i++){
                    console.log(i);
                    BaseContainer.appendChild(ElementContainer[EndIndex + 1][i]);
                }
                EndIndex++;
            }else{
                for(let i = 0; i < ElementContainer[EndIndex].length - 1; i++){
                    console.log(i);
                    BaseContainer.appendChild(ElementContainer[EndIndex + 1][i]);
                    BaseContainer.firstChild.remove();
                }
                EndIndex++;
                StartIndex++;
            }
            

            console.log("End");
        }
        if(StartIndex > 1 && isVisible(BaseContainer.childNodes[i]) && BaseContainer.childNodes[i].isEqualNode(ElementContainer[StartIndex][0])){
            console.log("Start")
        }
    }


    scrollLock = false;
}

function Re_getDocuments(){
    DeleteButtons = [];
    UpdateButtons = [];
    BaseContainer = document.getElementById("ProductListContainer");
    DeleteButtons = document.getElementsByClassName("DeleteButton");
    UpdateButtons = document.getElementsByClassName("UpdateButton");
}

async function AddButtonEventListeners(){
    for(let i = 0; i < DeleteButtons.length; i++){
        DeleteButtons[i].addEventListener('click', function(e) {
            socket.emit('Delete', msg={Target:'<%- PageState.CurrentRenderTarget %>', Value:DeleteButtons[i].getAttribute("value")});
        });
    }
    for(let j = 0; j < UpdateButtons.length; j++){
        UpdateButtons[j].addEventListener('click', function(e) {
            socket.emit('Update', msg="Sable");
        });
    }
}


BaseContainer.addEventListener("scroll", (e) => {
    if(ScrollPosY === undefined){
        ScrollPosY = BaseContainer.scrollTop;
    }
    if(BaseContainer.scrollTop > ScrollPosY){
        ScrollDirection.Down = true;
        ScrollDirection.Up = false;
        ScrollPosY = BaseContainer.scrollTop;
    }
    if(BaseContainer.scrollTop < ScrollPosY){
        ScrollDirection.Up = true;
        ScrollDirection.Down = false;
        ScrollPosY = BaseContainer.scrollTop;
    }
    if(!scrollLock){
        scrollLock = true;
        socket.emit("Ping");
    }
});

socket.on('Pong', function(msg){
    UpdateList(msg);
});

Add.addEventListener('click', function(e) {
    //socket.emit('Add', msg={Target:"Sable"});
  });
socket.on("Delete", function(msg){
    //BuildProduct(msg);
});
socket.on("Add", function(msg){
    //console.log(msg);
});
socket.on("init", function(msg){
    FirstBuild(msg);
});
socket.on("reload", function(){
    FirstBuild(msg);
});
</script>