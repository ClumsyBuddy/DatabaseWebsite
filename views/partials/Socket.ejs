<script src="/socket.io/socket.io.js"></script>
<script async>
var socket = io();

socket.emit("init");

var BaseContainer = document.getElementById("ProductListContainer");
var Add = document.getElementById("Add");
let scrollLock = false;
var ScrollPosY = undefined;
var ScrollDirection = {Up:false, Down:false};
let Start = false;
const ContainerLength = 100;
var ElementContainer = [];
var ProductList = [];

var ClientData = {
    DisplayIndexInternal: 0,
    DisplayIndexListener: function(val){},
    set DisplayIndex(val){
        this.DisplayIndexInternal = val;
        this.DisplayIndexListener(val);
    },
    get DisplayIndex(){
        return this.DisplayIndexInternal;
    },
    registerListener: function(listner){
        this.DisplayIndexListener = listner;
    }
}

var PreviousIndex = ClientData.DisplayIndex;
var NextIndex = ClientData.DisplayIndex + 1;

ClientData.registerListener(function(val){
    NextIndex = ClientData.DisplayIndex + 1;
    if(ClientData.DisplayIndex > 1){
        PreviousIndex = ClientData.DisplayIndex - 1;
    }
});


function setAttributes(el, attrs) {
  for(var key in attrs) {
    el.setAttribute(key, attrs[key]);
  }
}

function CreateElement(){
    var Container = document.createElement("div");
    setAttributes(Container, {'class':'ProductContainer', 'style':'background-image: url("");'});
    var Form1 = document.createElement("div");
    setAttributes(Form1, {"id":'Delete'});
    Form1.insertAdjacentHTML("beforeend", "<button class='DeleteButton' type='submit' name='Sable' value='null'></button>");
    var Form2 = document.createElement("div");
    setAttributes(Form2, {"id":'Update'});
    Form2.insertAdjacentHTML("beforeend", "<button class='UpdateButton' type='submit' name='Sable' value='null'></button>");
    var Form3 = document.createElement("div");
    setAttributes(Form3, {'style':'height:100%;'});
    Form3.insertAdjacentHTML("beforeend", '<button class="ProductButton" name="C_Product" value="null" ><div class="NameContainer"><p class="ItemName">SKU:null</p><p class="ItemName">Brand:null</p><p class="ItemName">Color:null</p></div></button>');    
    Container.appendChild(Form1);
    Container.appendChild(Form2);
    Container.appendChild(Form3);
    return Container;
}

function Produce(Ele, key, sku, brand, color){
    Ele.setAttribute("style", `background-image: url()`);
    Ele.children[0].setAttribute("value", `${key}`);
    Ele.children[0].children[0].setAttribute("value", `${key}`);
    Ele.children[1].children[0].setAttribute("value", `${key}`);
    Ele.children[2].children[0].setAttribute("value", `${key}`);
    Ele.children[2].children[0].children[0].children[0].textContent = `SKU:${sku}`;
    Ele.children[2].children[0].children[0].children[1].textContent = `Brand:${brand}`;
    Ele.children[2].children[0].children[0].children[2].textContent = `Color:${color}`;
    return true;
}
function BuildProductArray(msg, StartIndex, FinishIndex){
    for(let j = StartIndex; j < FinishIndex; j++) //Build the elements
    {
        setTimeout(() => {
            Produce(ProductList[j], msg[j].key, msg[j].sku, msg[j].brand, msg[j].Color);
        }, 3*j);
    }
    //BuildContainer(ProductList, StartIndex, FinishIndex);
    console.log("Finished: " + StartIndex + " - " + FinishIndex);
}

function BuildFactory(msg, Length, Max){
    console.log((Length / Max % 1));
    console.log(Length / Max);

    try{
        for(let i = 0; i < Math.ceil(Length / Max); i++){
            setTimeout(() => {
                if(i >= Math.floor(Length / Max) && Length / Max % 1 < 1){
                    BuildProductArray(msg, (Max*i), Length);
                    console.log("End");
                }else{
                    BuildProductArray(msg, (Max*i), Max*(i+1));
                }
                //console.log((Max*i), Max*(i+1));
            }, 5*i);
        }
    }catch(e){
        console.log(e);
    }
}


function RemoveChildNodes(Element){ //Removes All Childeren and returns true if it manages to remove all else return false
    var count = 0;
    while(Element.hasChildNodes()){ //Remove all childeren from the BaseContainer
        Element.removeChild(Element.firstChild);
        if(count > 100000){
            return false;
        }
        count++;
    }
    return true;
}

function isVisible(elem) {
    if (!(elem instanceof Element)) throw Error('DomUtil: elem is not an element. ');
    const style = getComputedStyle(elem);
    if (style.display === 'none') return false;
    if (style.visibility !== 'visible') return false;
    if (style.opacity < 0.1) return false;
    if (elem.offsetWidth + elem.offsetHeight + elem.getBoundingClientRect().height +
        elem.getBoundingClientRect().width === 0) {
        return false;
    }
    const elemCenter   = {
        x: elem.getBoundingClientRect().left + elem.offsetWidth / 2,
        y: elem.getBoundingClientRect().top + elem.offsetHeight / 2
    };
    if (elemCenter.x < 0) return false;
    if (elemCenter.x > (document.documentElement.clientWidth || window.innerWidth)) return false;
    if (elemCenter.y < 0) return false;
    if (elemCenter.y > (document.documentElement.clientHeight || window.innerHeight)) return false;
    let pointContainer = document.elementFromPoint(elemCenter.x, elemCenter.y);
    do {
        if (pointContainer === elem) return true;
    } while (pointContainer = pointContainer.parentNode);
    return false;
}

/*
function BuildContainer(List, Start, End){
    var TempArray = [];
    for(let j = Start; j < End; j++) //Build the elements
    {
        TempArray.push(ProductList[j]);
    }
    ElementContainer.push(TempArray);
}
*/
/*
function BuildDisplayContainers(List, Length, Max){
    try{
        for(let i = 1; i < Length / Max; i++){
            setTimeout(() => {
                BuildContainer(List, (Max*i)+1, Max*(i+1)); 
            }, 5*i);
        }
    }catch(e){
        console.log(e);
    }
}
*/
function FirstBuild(msg){
    if(msg.length > 0){
        var Node = CreateElement();
        for(let j = 0; j < msg.length; j++){
            ProductList.push(Node.cloneNode(true)); //Push Clones into the array to fill our product need
        }
    }
    BuildProductArray(msg, 0, ContainerLength);
    BuildFactory(msg, ProductList.length, ContainerLength);        

    RemoveChildNodes(BaseContainer);
    for(let items = 0; items < ContainerLength; items++){
        BaseContainer.appendChild(ProductList[items]);
    }
    Re_getDocuments();
    AddButtonEventListeners();
}

function RebuildAfterDelete(ItemIndex){
    var PIndex = undefined;
    for(let i = 0; i < ProductList.length; i++){
        if(ProductList[i].children[0].children[0].getAttribute("value") == ItemIndex){
            //ProductList.splice(i, 1);
            PIndex = i;
            break;
        }
    }

    for(let k = 0; k < BaseContainer.children.length; k++){
        if(BaseContainer.children[k].isEqualNode(ProductList[PIndex])){
            BaseContainer.children[k].remove();
            BaseContainer.appendChild(ElementContainer[EndIndex+1][0]);
        }
    }
    ElementContainer = [];
    for(let n = 0; n < Math.ceil(ProductList.length / ContainerLength); n++){
        var InnerArray = [];
        for(let m = 0; m < ContainerLength; m++){
            if(ProductList[n*ContainerLength+m] == undefined){
                break;
            }
            InnerArray.push(ProductList[n*ContainerLength+m]);
        }
        ElementContainer.push(InnerArray);
    }
    //RemoveChildNodes(BaseContainer);
    
    console.log(BaseContainer.children.length);
    
}


function clone2D(a) {
  return a.map(o => [...o]);
}

function isScrolledIntoView(el) {
    var rect = el.getBoundingClientRect();
    var elemTop = rect.top;
    var elemBottom = rect.bottom;
    // Only completely visible elements return true:
    var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);
    // Partially visible elements return true:
    //isVisible = elemTop < window.innerHeight && elemBottom >= 0;
    return isVisible;
}


function UpdateList(){
    Re_getDocuments();
    //AddButtonEventListeners();
    for(let i = 0; i < BaseContainer.children.length; i++){
        if(BaseContainer.children[i] == undefined){
            continue;
        }
        var CurrentNode = BaseContainer.childNodes[i];
        var Curr = ClientData.DisplayIndex;
        var Next = NextIndex;
        var Prev = PreviousIndex;
        
        if(isScrolledIntoView(CurrentNode) && CurrentNode.isEqualNode(ProductList[(Curr+1) * ContainerLength-1])){
            if(Curr == 0){
                console.log("up");
                console.log(CurrentNode);
                for(let j = (Prev*ContainerLength); j < ((Curr + 1) * ContainerLength); j++){
                    BaseContainer.appendChild(ProductList[j]);
                }
            }else{
                for(let j = Prev*ContainerLength+1; j < Curr * ContainerLength; j++){
                    try{
                    BaseContainer.appendChild(ProductList[j]);
                    BaseContainer.firstChild.remove(); 
                    }catch(e){
                        console.log(e);
                        console.log(j);
                    }
                }
            }
            ClientData.DisplayIndex += 1;
        }
        /*
        if(isScrolledIntoView(CurrentNode) && CurrentNode.isEqualNode(ProductList[Prev * ContainerLength])){
            var curScrollPos = BaseContainer.scrollTop;
            var oldScroll = BaseContainer.scrollHeight - BaseContainer.clientHeight;
            for(let j = ElementContainer[DisplayIndex].length - 1; j >= 0; j--){
                try{
                    BaseContainer.prepend(ElementContainer[DisplayIndex - 1][j]);
                }catch(e){
                    console.log(e);
                    console.log(ElementContainer[DisplayIndex - 1][j]);
                    console.log("DisplayIndex: " + DisplayIndex);
                    console.log("Current Index: " + j);
                }
            }
            var newScroll = BaseContainer.scrollHeight - BaseContainer.clientHeight;
            BaseContainer.scrollTop = curScrollPos + (newScroll - oldScroll);

           for(let j = ElementContainer[DisplayIndex].length - 1; j >= 0; j--){
                try{
                    BaseContainer.lastChild.remove();
                }catch(e){
                    console.log(e);
                    console.log(ElementContainer[DisplayIndex - 1][j]);
                    console.log("StartIndex: " + DisplayIndex);
                    console.log("Current Index: " + j);
                }
            }
            DisplayIndex--;
        }
        */
    }
    scrollLock = false;
}

function Re_getDocuments(){
    BaseContainer = document.getElementById("ProductListContainer");
}

function AddButtonEventListeners(){
    BaseContainer.addEventListener("click", function(e){
        if(e.target){
            if(e.target.getAttribute("class") == "DeleteButton"){
                console.log("hello World");
                socket.emit('Delete', msg={Target:'<%- PageState.CurrentRenderTarget %>', Value:e.target.getAttribute("value")});
            }
            if(e.target.getAttribute("class") == "Update"){
                console.log("Update");
            }
        }
    });
}


BaseContainer.addEventListener("scroll", (e) => {
    if(!scrollLock){
        scrollLock = true;
        setTimeout(() => {
          UpdateList();      
        }, 1000);
    }
});

Add.addEventListener('click', function(e) {
    //socket.emit('Add', msg={Target:"Sable"});
  });
socket.on("Delete", function(msg){ //TODO Recieve whether delete succeeded and if it did then remove the item and possibly rebuild?
    console.log(msg);
    RebuildAfterDelete(msg.Value);        
    //FirstBuild()
});
socket.on("Add", function(msg){
    //console.log(msg);
});
socket.on("init", function(msg){
    console.log("Init");
    FirstBuild(msg);
});
socket.on("reload", function(){
    console.log("Reloaded");
    FirstBuild(msg);
});
</script>